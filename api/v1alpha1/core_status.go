package v1alpha1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// ICoreStatus is used to define the core common status functions that all Status structs in this
// API must adhere to. These common functions simplify the reconciler() functions so that they can
// easily get/set status on the resources in a common way.
//
// +kubebuilder:object:generate=false
type ICoreStatus interface {
	IsReady() bool
	SetReady(bool)
	GetConditions() *[]metav1.Condition
	SetAccessMessage(string)
	GetAccessMessage() string
}

// CoreStatus provides a common set of .Status fields and functions. The goal is to
// conform to the interfaces.OzResource interface commonly across all of our core CRDs.
type CoreStatus struct {
	// Current status of the Access Template
	Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`

	// Simple boolean to let us know if the resource is ready for use or not
	Ready bool `json:"ready,omitempty"`

	// AccessMessage is used to describe to the user how they can make use of their temporary access
	// request. Eg, for a PodAccessTemplate the value set here would be something like:
	//
	//   "Access Graned, connect to your pod with: kubectl exec -ti -n namespace pod-xyz -- /bin/bash"
	//
	AccessMessage string `json:"accessMessage,omitempty"`
}

// https://stackoverflow.com/questions/33089523/how-to-mark-golang-struct-as-implementing-interface
var (
	_ ICoreStatus = &CoreStatus{}
	_ ICoreStatus = (*CoreStatus)(nil)
)

// GetConditions returns a pointer to the list of Conditions in the Status.
func (in *CoreStatus) GetConditions() *[]metav1.Condition {
	return &in.Conditions
}

// IsReady conforms to the interfaces.OzResource interface
func (in *CoreStatus) IsReady() bool {
	return in.Ready
}

// SetReady conforms to the interfaces.OzResource interface
func (in *CoreStatus) SetReady(ready bool) {
	in.Ready = ready
}

// SetAccessMessage sets (or updates) the Status.AccessMessage field.
func (in *CoreStatus) SetAccessMessage(msg string) {
	in.AccessMessage = msg
}

// GetAccessMessage returns the Status.AccessMessage field.
func (in *CoreStatus) GetAccessMessage() string {
	return in.AccessMessage
}

// DeepCopyInto is typically auto-generated by controller-gen. However, it seems that controller-gen
// fails when we include the ozResourceCoreStatus.Conditions field. Implementing our own DeepCopyInto function
// resolves this, but does put the responsibility on us to keep this updated.
func (in *CoreStatus) DeepCopyInto(out *CoreStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}
