package v1alpha1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// OzResourceCoreStatus provides a common set of .Status fields and functions. The goal is to
// conform to the interfaces.OzResource interface commonly across all of our core CRDs.
type ozResourceCoreStatus struct {
	// Current status of the Access Template
	Conditions []metav1.Condition `json:"conditions,omitempty"`

	// Simple boolean to let us know if the resource is ready for use or not
	// +kubebuilder:default:=false
	Ready bool `json:"ready,omitempty"`
}

// GetConditions returns a pointer to the list of Conditions that have been applied to this Status
// object. Conforms to the interfaces.OzResource interface.
//
// Returns:
//
//	*[]metav1.Condition: Pointer to list of metav1.Condition structs.
func (s *ozResourceCoreStatus) GetConditions() *[]metav1.Condition {
	return &s.Conditions
}

// IsReady returns the Status.Ready field. Conforms to the inferfaces.OzResource interface.
//
// Returns:
//
//	bool: Whether or not the resource has been marked ready.
func (s *ozResourceCoreStatus) IsReady() bool {
	return s.Ready
}

// SetReady sets the Status.Ready field. Conforms to the interfaces.OzResource interface.
func (s *ozResourceCoreStatus) SetReady(ready bool) {
	s.Ready = ready
}

// DeepCopyInto is typically auto-generated by controller-gen. However, it seems that controller-gen
// fails when we include the ozResourceCoreStatus.Conditions field. Implementing our own DeepCopyInto function
// resolves this, but does put the responsibility on us to keep this updated.
func (s *ozResourceCoreStatus) DeepCopyInto(out *ozResourceCoreStatus) {
	*out = *s
	if s.Conditions != nil {
		in, out := &s.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}
